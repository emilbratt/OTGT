name: 'example_elspot' # used as the plan id and alias

# MAIN ENTRY 1. TARGET DEVICES TO BE OPERATED -> include one or more sub-entries
target:
  # each target needs to be implemented as its own module/unit in the application

  exampletarget: # example target for testing
    include_entry: true # enable/disable target
    entries:
      # some key: some val
      switch_1: 'switch_1_id'
      switch_2: 'switch_2_id'

  mqtt:
    include_entry: false # enable/disable target
    entries:
      # <state> : <message that is sent when state is called>
      lev_max:  '{"desc": "max charging",    "level": "max"}'
      lev_high: '{"desc": "high charging",   "level": "high"}'
      lev_mid:  '{"desc": "normal charging", "level": "mid"}'
      lev_low:  '{"desc": "low charging",    "level": "low"}'
      lev_off:  '{"desc": "no charging",     "level": "off"}'

# MAIN ENTRY 2. CALENDAR FOR OPERATION -> include one or more sub-entries
calendar:

  # exclude these dates (overrides all other entries)
  exclude_dates:
    include_entry: false

  # include these dates (overrides all other entries except exclude_dates)
  include_dates:
    include_entry: false

  # include|exclude fixed weekdays for operation
  weekdays:
    include_entry: true
    monday: true
    tuesday: true
    wednesday: true
    thursday: true
    friday: true
    saturday: true
    sunday: true

# MAIN ENTRY 3. SCHEDULE FOR OPERATION
schedule:
  elspot:
    include_entry: true

    # SCHEDULE PLANS

    # lowest_price_switch:
    # # states: 2 - active and inactive
    # # will operate: yes - at least once every day
    #   exampletarget:
    #     # PLAN OPTIONS
    #     operation_time: '800' # fixed operation time (in minutes) for when state is "active_state"
    #     active_state: 'on' # operation state - when elspot price is lower -> this state is active
    #     inactive_state: 'off' # non-operation state - when elspot price is higher -> this state is active

    # minimum_weight_level: # weight 0 = lowest price, weight 10 = max price, but there is more to it than that, read libelspot impl.
    # # states: 11 - one for each weight number + an "inactive state"
    # # will operate: maybe - might not operate every day, much decided by "below_price"
    # # example: only charge a battery energy storage solution if prices are below threshold and increase charging level if weight levels are low
    #   mqtt:
    #     # PLAN OPTIONS
    #     below_price: '120' # only add states for weight levels if price is below, else state = inactive_state
    #     inactive_state: 'lev_off'
    #     weight_levels: # if only part of the weight levels are set, set value "null" for the remaining levels
    #       # weight level: <state>
    #       0: 'lev_max'
    #       1: 'lev_max'
    #       2: 'lev_high'
    #       3: 'lev_high'
    #       4: 'lev_high'
    #       5: 'lev_mid'
    #       6: 'lev_mid'
    #       7: 'lev_mid'
    #       8: 'lev_low'
    #       9: 'lev_low'
    #       10: 'lev_low'

    water_heater_switch:
    # states: 2 - active and inactive
    # will operate: everyday avoiding long inactive periods
    # parts of day: minimum of 60 minutes active state one for each part (00-06, 06-12, 12-18, 18-24)
      exampletarget:
        # PLAN OPTIONS
        operation_time: '715' # minimum 240 -> fixed operation time in minutes for when state is "active_state"
        active_state: 'on'
        inactive_state: 'off'
