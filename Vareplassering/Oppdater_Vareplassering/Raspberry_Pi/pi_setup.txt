Updated: 05.01.2021 by Emil Bratt BÃ¸rsting

1. Download Raspberry Pi OS lite 32 bit and write to sd-card.


2. Adjust settings..
$ sudo raspi-config
set local options
Connect to network wifi
enable auto login to text console
enable ssh
set date/time etc
set correct hostname


3. Update system
$ sudo apt update && sudo apt upgrade -y


4. change password for pi user
$ passwd


5. Install dependencies for script
For MSSQL
$ sudo apt install unixodbc -y
$ sudo apt install unixodbc-dev -y
$ sudo apt install freetds-dev -y
$ sudo apt install tdsodbc -y
$ sudo apt install freetds-bin -y
$ sudo apt install python3-pip -y
$ pip3 install --user pyodbc
For MariaDB
$ sudo apt-get install libmariadb3 libmariadb-dev -y
$ pip3 install --user mariadb
For LED
$ pip3 install --user gpiozero
$ pip3 install --user RPi.GPIO


6. Add at bottom of FreeTDS conf file:
sudo nano /etc/freetds/freetds.conf

[sqlserver]
      host = <ip/hostname> # Remote Sql Server's IP addr
      port = 1433 # this is default port, but you can change it
      tds version = 7.4 # chose version you want to use
      instance = <dbname> # insert the name of the database you are gonna use


7. Create DSN (add to file)
$ sudo nano /etc/odbcinst.ini

(add text under)

[FreeTDS]
Description = FreeTDS unixODBC Driver
Driver = /usr/lib/arm-linux-gnueabihf/odbc/libtdsodbc.so
Setup = /usr/lib/arm-linux-gnueabihf/odbc/libtdsodbc.so
UsageCount = 1

(save and exit)

$ sudo nano  /etc/odbc.ini

(add text under)

[FreeTDS]
Driver = /usr/lib/arm-linux-gnueabihf/odbc/libtdsodbc.so
Description = MSSQL Server
Trace = No
Server = <ip/hostname> # IP or host name of the Sql Server
Database = <DBNAME> # Database name
Port = 1433 # this is default port, but you can change it
TDS_Version = 7.4 # chose version you want to use

(save and exit)


8. Copy app-source to raspberry pi
Structure like this:


$ mkdir /home/pi/app
  credentials file goes into /home/pi/credentials.json
  files that goes into /home/pi/app/
    backup_usb.sh
    credentials.py
    databuild.py
    debug.json
    inventory.py
    main.py


  if you have not generated a credential file, do so by running:
  ./main.py credentials (using the credentials flag to add new credentials)


9. (Optional) Create mountpoint for usb if you want to make an inventory backup to USB
Remember: Pi will not boot unless USB is attached, see -> -systemd.device-timeout=0
This is to avoid conflict if USB is not attached
Format a usb with fat32 and label "PI"
$ mkdir /home/pi/usb
$ sudo nano /etc/fstab

(add text to bottom)

LABEL=PI /home/pi/usb        vfat	user,auto,uid=pi,x-systemd.device-timeout=0     0       2

(save and exit)

$ chmod +x /home/pi/app/backup_usb.sh

Remember to set  "usb": true, in mode.json


10. Make boot script and add to .bashrc
$ nano /home/pi/.bashrc

(add text to bottom)

cd /home/pi/app
python3 /home/pi/app/main.py

(save and exit)


11. Set mode
If battery mode with usb the mode.json could look like this:
{
  "sql": true,
  "shutdown": true,
  "passwordhide": true,
  "showcred": true,
  "led": true,
  "usb": true,
  "live": false
}
If live mode withoud usb (always on) the mode.json could look like this:
{
  "sql": true,
  "shutdown": false,
  "passwordhide": true,
  "showcred": true,
  "led": false,
  "usb": false,
  "live": true
}


12. optional.. kill switch for radio signals (wifi and bluetooth) if wired connection
$ sudo rfkill block wifi
$ sudo rfkill block bluetooth

list blocked radio transmitters
$ rfkill list all


13. optional.. make boot script to run after boot -> for multi-user (systemd)
$ nano nameofscript.py
	write the script....


$ nano nameofscript.service

(add text)

[Unit]
Description=what script does
After=multi-user.target

[Service]
User=pi
Group=pi
WorkingDirectory=/home/pi/
Type=simple
ExecStart=/usr/bin/python3 /home/pi/nameofscript.py
KillMode=process

[Install]
WantedBy=multi-user.target

(save and exit)

$ sudo cp nameofscript.service /etc/systemd/system/nameofscript.service
$ sudo systemctl enable update_shelf.service
####################



Links:
https://www.it-admins.com/raspberry-pi-and-microsoft-sql-databases/
http://www.pymssql.org/_mssql_examples.html
https://raspberrypi.stackexchange.com/questions/60792/install-python-module-pyodbc-on-pi
https://stackoverflow.com/questions/57269988/unable-to-get-odbc-driver-17-for-sql-server-on-raspbian-10-buster
https://www.raspberrypi.org/forums/viewtopic.php?t=16120
https://python-tds.readthedocs.io/en/latest/pytds.html
https://gist.github.com/rduplain/1293636
https://pymssql.readthedocs.io/en/latest/index.html#
https://github.com/facebook/prophet/issues/418

This:
https://stackoverflow.com/questions/44969924/querying-mssql-server-2012-from-a-raspberry-pi-3-using-python-freetds-and-pyodb
https://github.com/mkleehammer/pyodbc/wiki/Connecting-to-SQL-Server-from-Linux
